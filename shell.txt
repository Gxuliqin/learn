# shell学习记录
输入重定向  <
输出重定向 > >> 2> &>

变量 
	a=123 无空格
	let a=10

	l=ls

	命令赋值给变量，使用$() 或者''
	letc=$(ls -l /etc)
	若给变量赋值有空格 使用"" ''

	${变量} 对变量的引用

	echo ${变量} {}可省略

变量作用范围	
	仅对当前起作用
	子进程与父进程无关系
	source .sh 变量才对当前SHELL起作用
 
	export var 子进程获得父进程变量

删除变量  取消变量值 unset var


环境变量 
	env 查看环境变量
	增加变量 PATH=$PATH:/root
	$PS1

 $$ 位置参数
	echo $? 上条指令是否成功 成功 :0
	echo $$ 当前进程pid
	echo $0 当前程序名

	位置参数 $1,$2,....${10},${11} 位置1,2，...10,11
	
	参数替换
		${1}default  若参数为空，赋给default
		推荐 ${1-default}  

数组
	p=(10.1 10.2 10.3)
	所有元素 echo ${p[@]}
	元祖个数 echo ${#p[@]}
	第一个元素 echo ${p[0]}
	
引用
	双引号"  不完全引用 变量得到解释
	单引号' 完全引用
	反引号`	含有指令 'expr 4 + 5'
		liqin@liqin-Aspire-E5-572G:~/learshell$ echo '$v'
			$v
		liqin@liqin-Aspire-E5-572G:~/learshell$ echo "$v"
			123
运算符
	基本 + - * / ** %
	expr 4 + 5  仅支持整数
	
	((a=10))  == let "a=10" 是let命令的简化 echo $((a++))  echo $((10+20))
 	
特殊符号：
	() 创建一个子SHELL
	(()) 做算数运算 
	[] 测试代码  [5 -gt 6]  [[5>4]] 
	>  < 重定向
	{} echo {0..9} 输出一个范围  
	&& (( 5<4 %% 6>5 ))  逻辑与运算 || ， ！ (( ! 5>4 )) 
	: 空指令
	. source命令
	
测试与判断
 	test 	[ -d /etc ]	    
		  -z STRING
              		the length of STRING is zero

       		STRING1 = STRING2
              		the strings are equal

       		STRING1 != STRING2
              		the strings are not equal

       		INTEGER1 -eq INTEGER2
             		 INTEGER1 is equal to INTEGER2

       		INTEGER1 -ge INTEGER2
              		INTEGER1 is greater than or equal to INTEGER2

		 -d FILE
              		FILE exists and is a directory

       		-e FILE
              		FILE exists

       		-f FILE
              		FILE exists and is a regular file

	[]不支持 整数 > < =  用 -gt -eq -ge -le等

条件语句： ~/learnshell/if.sh
	if [测试条件成立] 或 返回值为0 ;
		then 执行指令
	fi 结束
		
		if [$UID = 0] ;
			then 条件成立
				echo "use"
			(else) 条件不成立
				echo "not"
		elif [ 条件 ] ； 
			
		fi


分支： ~/learnshell/case.sh
	case  "$变量" in
		"情况1")
		命令;;
		"情况2")
		命令;;
	esac

循环： ××/for.sh
	for:  使用反引号`或者$() 方式执行的命令， 结果当做列表处理
		for 参数 in 列表
			do 
				执行命令
		done	封闭循环

	c语言写法： for((变量初始化；循环条件；变量变化))
		do
			执行命令
		done	
			etc. for (( i=1 ; i<10 ; i++ )); do  echo $i; done


	while: 
		while test测试是否成立

			do
				执行命令				
		done
			etc.  while [ $a -lt 10 ]; do ((a++)) ; echo $a; done
	
  	until: 与while 相反
		etc.  until [ $a -gt 10 ]; do ((a++)) ; echo $a; done



		

